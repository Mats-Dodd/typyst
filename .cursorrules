# Typyst - Modern Text Editor Specification

## Project Overview
Typyst is a modern, desktop-based text editor application built using Electron and React, focusing on providing advanced writing assistance, AI-powered suggestions, and local version control. The application features a clean, modular architecture with clear separation of concerns between the main process and renderer components.

## Technical Stack
- **Frontend**: React with TypeScript
- **Desktop Runtime**: Electron
- **Editor Framework**: TipTap (ProseMirror-based rich text editor)
- **Build Tools**: Vite
- **Writing Assistant**: Vale
- **AI Integration**: LLama
- **State Management**: React Hooks
- **Styling**: CSS Modules
- **Version Control**: Custom local versioning system

## Directory Structure and Architecture

### 1. Main Process (/electron)
#### Core Files
- **index.ts**
  - Window lifecycle management
  - Custom frameless window (macOS integration)
  - Development tools configuration
  - App event handling (window creation, quit, activate)
  - Process communication setup

- **preload.ts**
  - Secure IPC bridge configuration
  - Type-safe API exposure to renderer
  - File system operations bridge
  - Vale integration bridge
  - Version control bridge

#### RPC System (/electron/rpc)
- **fileSystemRpc.ts**
  - Markdown file operations
  - File system access
  - Content conversion
  - File watching and auto-save

- **versioningRpc.ts**
  - Version control operations
  - Branch management
  - History tracking
  - Diff generation

- **llmRpc.ts**
  - LLama model integration
  - AI-powered suggestions
  - Context-aware completions

#### Services (/electron/services)
- **versioning/**
  - Local version control implementation
  - Branch management system
  - Version history storage
  - Diff computation engine
  - Restore point management

- **vale/**
  - Style checking integration
  - Real-time linting engine
  - Custom rule management
  - Asynchronous processing

- **autocomplete/**
  - LLM-powered suggestions
  - Context analysis
  - Prediction management
  - Performance optimization

### 2. Renderer Process (/src)
#### Core Setup
- **index.tsx**
  - React initialization
  - Root component mounting
  - IPC bridge setup
  - Global style injection

- **app/**
  - Root component (App.tsx)
  - Global providers
  - Layout structure
  - State management

#### Features (/src/features)
##### Editor Module (/features/editor)
- **components/**
  - Editor.tsx: Main wrapper with theme integration
  - EditorContent.tsx: TipTap integration & core functionality
  - FileSelector.tsx: File management UI
  - MenuBar.tsx: Toolbar and controls
  - ValeSidebar.tsx: Writing suggestions panel
  - ErrorOverlay.tsx: Error handling
  - RawContentPreview.tsx: Debug view
  - BranchControls.tsx: Version control interface

- **hooks/**
  - useEditorCore.ts: Core editor state
  - useValeState.ts: Writing suggestions
  - useEditorShortcuts.ts: Keyboard handling
  - useEditorSpellcheck.ts: Spellcheck
  - useVersionControl.ts: Version management

- **services/**
  - fileSystemService.ts: File operations
  - valeService.ts: Writing assistance
  - eventHandlers.ts: Event management
  - versionControlService.ts: Version control

##### Versioning Module (/features/versioning)
- **components/**
  - BranchList.tsx: Branch management
  - HistoryView.tsx: Version history
  - DiffViewer.tsx: Changes display

- **services/**
  - versionControlService.ts: Version management
  - diffService.ts: Diff computation
  - historyService.ts: History tracking

##### Theme Module (/features/theme)
- themeContext.tsx: Theme provider
- themes/: Theme definitions
- hooks/: Theme utilities

#### Extensions (/src/extensions)
- **TipTap Extensions**
  - extensions.ts: Configuration
  - indent/: Indentation handling
  - predictions/: AI suggestions
  - versioning/: Version control
  - Custom ProseMirror plugins

#### Shared Resources
- **/types**: Global TypeScript definitions
- **/services**: Shared business logic
- **/styles**: Global styling
  - Editor.css: Editor styles
  - MenuBar.css: Toolbar styles
  - BranchControls.css: Version control UI

## Core Features

### 1. Rich Text Editing
- TipTap/ProseMirror foundation
- Advanced text formatting
- Code block highlighting
- Custom extensions
- Real-time content updates
- Keyboard shortcuts
- Spellchecking

### 2. AI-Powered Assistance
- Real-time LLM completions
- Context-aware suggestions
- Inline predictions
- Performance-optimized processing
- Customizable suggestion display

### 3. Writing Assistance (Vale)
- Real-time style checking
- Custom rule support
- Interactive suggestion sidebar
- Warning/error management
- Ignorable warnings system
- Performance optimization

### 4. Version Control System
- Local version history
- Branch management
- Real-time diff generation
- Version comparison
- Restore points
- Automatic version creation
- Branch metadata tracking

### 5. File Management
- Markdown support
- Auto-save functionality
- File watching
- Content conversion
- Error handling

### 6. Theme System
- Light/dark mode
- Customizable styling
- Dynamic theme switching
- CSS module integration

## Technical Implementation

### 1. Communication Architecture
- Bidirectional IPC (birpc)
- Type-safe interfaces
- Service-based architecture
- Asynchronous operations
- Performance optimization

### 2. State Management
- React hooks-based
- Feature-specific hooks
- Centralized core state
- Optimized updates

### 3. Extension System
- Modular TipTap extensions
- Custom ProseMirror plugins
- Feature-specific plugins
- Performance considerations

## Development Guidelines
- TypeScript for type safety
- Modular architecture
- Hook-based state management
- Comprehensive error handling
- Performance optimization
- Cross-platform support
- Modern development practices
